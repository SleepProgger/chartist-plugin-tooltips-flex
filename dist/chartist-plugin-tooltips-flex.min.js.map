{"version":3,"sources":["chartist-plugin-tooltips-flex.js"],"names":["root","factory","define","amd","Chartist","returnExportsGlobal","exports","module","require","this","window","document","binarySearch","ar","el","compare_fn","m","n","length","k","cmp","default_tooltip_display","series","tooltip","x_vals","text","i","push","value","x","tooltipNameFormat","tooltipFormatX","y","tooltipFormatY","tooltipMergeXSeries","defaultOptions","tooltipOffset","tooltipTooltipClass","tooltipMarkerClass","tooltipMergeFnc","tooltipDisplayFnc","tooltipHighlightPoint","tooltipHighlightPointClass","tooltipFollowMaxLine","tooltipTooltipYDist","noop","name","x_values","merge_functions","left","right","point","svg","data","nearest","Math","abs","attr","plugins","Tooltips_flex","options","extend","bind","chart","get_nearest_points","elements","raw_x","a","b","max","_show_tooltip","classList","add","marker","addClass","_tooltip_visible","update","rafQueued","cont_box","container","getBoundingClientRect","left_border","pageXOffset","mouse_x","last_event","pageX","values","vals_y","highlightsToAdd","points","pToHighlight","j","node","getNode","getAttribute","ret","textContent","height","offsetHeight","width","offsetWidth","offsetX","pageY","min","apply","top","pageYOffset","offsetY","style","transform","setAttribute","old_sel_points","remove","chart_container","body","querySelector","created","createElement","className","position","whiteSpace","append","addEventListener","event","removeClass","requestAnimationFrame","Line","on","grid","grid_box","top_padding","elem","x1","y1","x2","y2","series_data","console","log","series_name","querySelectorAll","svgElements","d","mergeFunctions"],"mappings":"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","file":"chartist-plugin-tooltips-flex.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"chartist\"], function (Chartist) {\n      return (root.returnExportsGlobal = factory(Chartist));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"chartist\"));\n  } else {\n    root['Chartist.plugins.Tooltips_flex'] = factory(Chartist);\n  }\n}(this, function (Chartist) {\n\n  /**\n   * Chartist.js plugin to display a tooltip when hovering (or clickin) the chart.\n   *\n   */\n  /* global Chartist */\n  (function(window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      tooltipOffset: {\n        x: 0,\n        y: 0\n      },\n      tooltipTooltipClass: 'chartist-tooltip-flex',\n      tooltipMarkerClass: 'chartist-tooltip-flex-marker',\n      /* Function to merge the two found nearest points.\n       * Can be one of: nearest, left, right\n       * Or a function. See comment over merge_functions. */\n      tooltipMergeFnc: 'nearest',\n      /* Function to create/update the tooltip content.\n       * function fn(series, tooltip)...\n       *  series contains {name: seriesname, value: value choosen by tooltipMergeFnc} for each series in the graph.\n       *  If the return value is not null set it as textContent. tooltip can be used to update html.\n       *  this is the options object so the format functions can be used in custom display functions. */\n      tooltipDisplayFnc: default_tooltip_display,\n      /* Adds the tooltipHighlightPointClass to each point returned by the merge function if set. */\n      tooltipHighlightPoint: true,\n      tooltipHighlightPointClass: 'ct-tooltip-point-hit',\n      /* Experimental feature which pins the tooltip to the max y of the graph at the mouse x position. */\n      tooltipFollowMaxLine: false,\n      tooltipTooltipYDist: 15,\n      /* Format function for x values. Used by the default tooltipMergeFnc */\n      tooltipFormatX: Chartist.noop,\n      /* Format function for y values. Used by the default tooltipMergeFnc */\n      tooltipFormatY: Chartist.noop,\n      /* Format function for series names. Used by the default tooltipMergeFnc */\n      tooltipNameFormat: function(x){ return x.name },\n      /* Format function to select which x value is shown. Parameter is an array of all x values. Used by the default tooltipMergeFnc */\n      tooltipMergeXSeries: function(x_values){ return x_values[0] }\n    };\n\n\n    /*\n     * \"Borrowed\" from https://stackoverflow.com/a/29018745/4830897\n     * Binary search in JavaScript.\n     * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point for the new element.\n     * Parameters:\n     *     ar - A sorted array\n     *     el - An element to search for\n     *     compare_fn - A comparator function. The function takes two arguments: (a, b) and returns:\n     *        a negative number  if a is less than b;\n     *        0 if a is equal to b;\n     *        a positive number if a is greater than b.\n     * The array may contain duplicate elements. If there are more than one equal elements in the array, \n     * the returned value can be the index of any one of the equal elements.\n     */\n    function binarySearch(ar, el, compare_fn) {\n        var m = 0;\n        var n = ar.length - 1;\n        while (m <= n) {\n            var k = (n + m) >> 1;\n            var cmp = compare_fn(el, ar[k]);\n            if (cmp > 0) {\n                m = k + 1;\n            } else if(cmp < 0) {\n                n = k - 1;\n            } else {\n                return k;\n            }\n        }\n        return m - 1;\n    }\n\n    /* Merge functions get the two nearest points and should return\n     * SVG point elements (which can then be highlighted) and one value\n     * to show in the tooltip.\n     * Params: left, right = {svg:SVG point, data: Point object (Should be {x:.., y:...})}, point = mouse position relative to graph\n     * Returns: [ [svg points to add options.tooltipHighlightPointClass class to], data point]\n     */\n    // TODO: use object instead of arrays as return value\n    var merge_functions = {\n        left: function(left, right, point){\n          if(!left) left = right;\n          return [[left.svg], left.data];\n        },\n        right: function(left, right, point){\n          if(!right) right = left;\n          return [[right.svg], right.data];\n        },\n        nearest: function(left, right, point){\n          if(!left) return [[right.svg], right.data];\n          if(!right) return [[left.svg], left.data];\n          if(Math.abs(left.svg.attr('x1') - point) < Math.abs(right.svg.attr('x1') - point))\n            return [[left.svg], left.data];\n          return [[right.svg], right.data]\n        },\n        // TODO: interpolate\n    }\n\n    /*\n     * The default display function.\n     * If the return value != null use it as textContent (!) for the tooltip.\n     * Use the tooltip parameter if you want to write/update HTML.\n     */\n    function default_tooltip_display(series, tooltip){\n      var x_vals = [];\n      var text = \"\";\n      for(var i=0; i < series.length; ++i){\n        x_vals.push(series[i].value.x);\n        text += this.tooltipNameFormat(series[i]) + \": \" + this.tooltipFormatX(series[i].value.y) + \"\\n\";\n      }\n      text = this.tooltipFormatY(this.tooltipMergeXSeries(x_vals)) + \"\\n\" + text;\n      return text;\n    }\n\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.Tooltips_flex = function(options) {\n      options = Chartist.extend({}, defaultOptions, options);\n      // This is a bit strange but allows the display func to use the formatter functions\n      options.tooltipDisplayFnc = options.tooltipDisplayFnc.bind(options);\n\n      return function tooltips_flex(chart) {\n        var chart_container = chart.container;\n        var tooltip = document.body.querySelector('.chartist-tooltip-flex');\n        var marker = null;\n        var width = 0, height = 0;\n\n        var series = [];\n        var created = false;\n        var old_sel_points = [];\n        var tooltipMergeFnc = options.tooltipMergeFnc;\n        if(typeof tooltipMergeFnc !== \"function\"){\n          tooltipMergeFnc = merge_functions[tooltipMergeFnc];\n        }\n\n        if(!tooltip){\n          tooltip = document.createElement('div');\n          tooltip.className = options.tooltipTooltipClass;\n          // Fallback CSS so its at least visible without the css file.\n          tooltip.style.position = 'absolute';\n          tooltip.style.whiteSpace = 'pre';\n          tooltip.style.top = '0';\n          document.body.append(tooltip);\n        }\n\n        function get_nearest_points(elements, point){\n          var i = binarySearch(elements.raw_x, point, function(a,b){\n            if(a > b) return 1;\n            if(a < b) return -1;\n            return 0;\n          });\n          var data = elements.data.data;\n          var right = null;\n          i = Math.max(0, i);\n          var left = {svg: elements.svg[i], data: data[i]};\n          if(i+1 < data.length){\n            right = {svg: elements.svg[i+1], data: data[i+1]}\n          }\n          return [left, right];\n        }\n\n        var _tooltip_visible = false;\n        function _show_tooltip(){\n          tooltip.classList.add('tooltip-show');\n          marker.addClass('tooltip-show');\n          _tooltip_visible = true;\n        }\n\n        var rafQueued = false;\n        var last_event = null;\n        function update(){\n          rafQueued = false;\n          if(!_tooltip_visible) _show_tooltip();\n          // getBoundingClientRect call required in case the graph position changes.\n          // I'd really like to get rid of this, but then we'd need to have the tooltip relative to the graph.\n          // TODO: as graph container child or as foreign svg object ? .. Still required to get the correct mouse_x ..\n          // TODO: try to cache it.. when to update ?\n          var cont_box = chart.container.getBoundingClientRect();\n          var left_border = cont_box.left + window.pageXOffset;\n          var mouse_x = last_event.pageX - left_border;\n\n          var values = [];\n          var vals_y = [];\n          var highlightsToAdd = [];\n          for(var i=0; i < series.length; ++i){\n            var points = get_nearest_points(series[i], mouse_x);\n            points = tooltipMergeFnc(points[0], points[1], mouse_x)\n            values.push({value: points[1], name: series[i].data.name});\n            var pToHighlight = points[0];\n            for(var j=0; j < pToHighlight.length; ++j){\n              var node = pToHighlight[j].getNode();\n              highlightsToAdd.push(node);\n              vals_y.push(node.getAttribute('y1'));\n            }\n          }\n\n          var ret = options.tooltipDisplayFnc(values, tooltip);\n          if(ret){\n            tooltip.textContent = ret;          \n          }\n          height = tooltip.offsetHeight;\n          width = tooltip.offsetWidth;\n          var offsetX = - width / 2 + options.tooltipOffset.x;\n          var y = last_event.pageY;\n          if(options.tooltipFollowMaxLine){\n            y = Math.min.apply(Math, vals_y) + cont_box.top + window.pageYOffset - options.tooltipTooltipYDist;\n          }\n          var offsetY = - height + options.tooltipOffset.y;\n\n          /*\n          * Try to do all the dom changing at once to limit relayouts.\n          */\n          //tooltip.style.top = y + offsetY + 'px';\n          //tooltip.style.left = event.pageX + offsetX + 'px';\n          // Not really sure this one is faster\n          tooltip.style.transform = 'translate(' + (last_event.pageX + offsetX) + 'px, ' + (y + offsetY) + 'px)';\n          marker.getNode().setAttribute('transform', 'translate('+mouse_x+' 0)');\n          if(options.tooltipHighlightPoint){          \n            // clean up old highlights\n            for(var i=0; i < old_sel_points.length; ++i){\n              old_sel_points[i].classList.remove(options.tooltipHighlightPointClass);\n            }\n            old_sel_points = [];\n            // and add new\n            for(var i=0; i < highlightsToAdd.length; ++i){             \n              highlightsToAdd[i].classList.add(options.tooltipHighlightPointClass);\n              old_sel_points.push(highlightsToAdd[i]);\n            }\n          }\n        }\n\n\n        chart_container.addEventListener('mouseenter', function (event) {\n          _show_tooltip();\n        });\n\n        chart_container.addEventListener('mouseleave', function (event) {\n          tooltip.classList.remove('tooltip-show');\n          marker.removeClass('tooltip-show');\n        });\n\n        chart_container.addEventListener('mousemove', function (event) {\n          if(!created) return;\n          last_event = event;\n          // Not really sure the requstAnimationFrame stuff is helping here.\n          // It might on slow devices\n          if(rafQueued){\n            return;\n          }\n          rafQueued = true;\n          requestAnimationFrame(update);\n        });\n\n\n        if (chart instanceof Chartist.Line) {\n          chart.on('created', function(data) {\n            var grid = chart.svg.querySelector('.ct-grids');\n            var grid_box = grid.getNode().getBoundingClientRect();\n            var cont_box = chart.container.getBoundingClientRect();\n            var top_padding = grid_box.top - cont_box.top;\n            marker = chart.svg.elem('line', {x1: 0, y1: top_padding, x2: 0, y2: grid_box.height + top_padding, style: options.tooltipMarkerClass}, options.tooltipMarkerClass );\n\n            series = [];\n            var series_data = chart.data.series;\n            console.log(chart);\n            for(var i=0; i < series_data.length; ++i){\n              var series_name = series_data[i].className;\n              // We are (ab)using the points here. Alternatively we could use the lines values.\n              // Series not always have the classname attribute so fall back to using the name.\n              if(!series_name){\n                series_name = '[*|series-name=\"'+series_data[i].name+'\"]';\n              } else{\n                series_name = \".\" + series_name;\n              }\n              var elem = chart.svg.querySelectorAll(series_name + ' .ct-point').svgElements;\n              var raw_x = [];\n              // Create raw x value array to increase search performance\n              for(var j=0; j < elem.length; ++j){\n                raw_x.push(elem[j].attr('x1'));\n              }\n              var d = {data: series_data[i], raw_x: raw_x, svg: elem};\n              series.push(d);\n            }\n            created = true;\n          });\n        }\n      };\n    };\n    Chartist.plugins.Tooltips_flex.mergeFunctions = merge_functions;\n    Chartist.plugins.Tooltips_flex.defaultOptions = defaultOptions;\n  }(window, document, Chartist));\n\n  return Chartist.plugins.Tooltips_flex;\n\n}));\n"]}