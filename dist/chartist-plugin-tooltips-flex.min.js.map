{"version":3,"sources":["chartist-plugin-tooltips-flex.js"],"names":["root","factory","define","amd","Chartist","returnExportsGlobal","exports","module","require","this","window","document","binarySearch","ar","el","compare_fn","m","n","length","k","cmp","default_tooltip_display","series","tooltip","x_vals","text","i","push","value","x","name","tooltipFormatX","y","tooltipFormatY","tooltipMergeX","defaultOptions","tooltipOffset","tooltipTooltipClass","tooltipMarkerClass","tooltipMergeFnc","tooltipDisplayFnc","tooltipHighlightPointClass","tooltipFollowMaxLine","tooltipTooltipYDist","noop","tooltipNameFormat","x_values","merge_functions","left","right","point","svg","data","nearest","Math","abs","attr","plugins","Tooltips_flex","options","extend","bind","chart","get_nearest_points","elements","raw_x","a","b","max","_show_tooltip","classList","add","marker","addClass","_tooltip_visible","chart_container","container","body","querySelector","width","height","console","log","created","old_sel_points","createElement","className","style","position","whiteSpace","append","addEventListener","event","remove","removeClass","last_x","pageX","cont_box","getBoundingClientRect","left_border","pageXOffset","mouse_x","values","vals_y","points","pToHighlight","j","node","getNode","getAttribute","_node","setAttribute","ret","textContent","offsetHeight","offsetWidth","offsetX","pageY","min","apply","top","pageYOffset","offsetY","Line","on","grid","grid_box","top_padding","elem","x1","y1","x2","y2","series_data","series_name","querySelectorAll","svgElements","d","mergeFunctions"],"mappings":"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","file":"chartist-plugin-tooltips-flex.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"chartist\"], function (Chartist) {\n      return (root.returnExportsGlobal = factory(Chartist));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"chartist\"));\n  } else {\n    root['Chartist.plugins.Tooltips_flex'] = factory(Chartist);\n  }\n}(this, function (Chartist) {\n\n  /**\n   * Chartist.js plugin to display a data label on top of the points in a line chart.\n   *\n   */\n  /* global Chartist */\n  (function(window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      tooltipOffset: {\n        x: 0,\n        y: 0\n      },\n      tooltipTooltipClass: 'chartist-tooltip-flex',\n      tooltipMarkerClass: 'chartist-tooltip-flex-marker',\n      tooltipMergeFnc: 'nearest',\n      tooltipDisplayFnc: default_tooltip_display,\n      tooltipHighlightPointClass: 'ct-tooltip-point-hit',\n\n      tooltipFollowMaxLine: false,\n      tooltipTooltipYDist: 15,\n\n      tooltipFormatX: Chartist.noop,\n      tooltipFormatY: Chartist.noop,\n      tooltipNameFormat: Chartist.noop,\n      tooltipMergeX: function(x_values){ return x_values[0] }\n    };\n\n    // Helper function. TODO: unused atm\n    function remove_childs(node){    \n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n    }\n\n    /*\n     * \"Borrowed\" from https://stackoverflow.com/a/29018745/4830897\n     * Binary search in JavaScript.\n     * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point for the new element.\n     * Parameters:\n     *     ar - A sorted array\n     *     el - An element to search for\n     *     compare_fn - A comparator function. The function takes two arguments: (a, b) and returns:\n     *        a negative number  if a is less than b;\n     *        0 if a is equal to b;\n     *        a positive number if a is greater than b.\n     * The array may contain duplicate elements. If there are more than one equal elements in the array, \n     * the returned value can be the index of any one of the equal elements.\n     */\n    function binarySearch(ar, el, compare_fn) {\n        var m = 0;\n        var n = ar.length - 1;\n        while (m <= n) {\n            var k = (n + m) >> 1;\n            var cmp = compare_fn(el, ar[k]);\n            if (cmp > 0) {\n                m = k + 1;\n            } else if(cmp < 0) {\n                n = k - 1;\n            } else {\n                return k;\n            }\n        }\n        return m - 1;\n    }\n\n    /* Merge functions get the two nearest points and should return\n     * SVG point elements (which can then be highlighted) and one value\n     * to show in the tooltip.\n     * Params: left, right = {svg:SVG point, data: Point object (Should be {x:.., y:...})}, point = mouse position relative to graph\n     * Returns: [ [svg points to add options.tooltipHighlightPointClass class to], data point]\n     */\n    // TODO: use object instead of arrays as return value\n    var merge_functions = {\n        left: function(left, right, point){\n          if(!left) left = right;\n          return [[left.svg], left.data];\n        },\n        right: function(left, right, point){\n          if(!right) right = left;\n          return [[right.svg], right.data];\n        },\n        nearest: function(left, right, point){\n          if(!left) return [[right.svg], right.data];\n          if(!right) return [[left.svg], left.data];\n          if(Math.abs(left.svg.attr('x1') - point) < Math.abs(right.svg.attr('x1') - point))\n            return [[left.svg], left.data];\n          return [[right.svg], right.data]\n        },\n        // TODO: interpolate\n    }\n\n    /*\n     * The default display function.\n     * If the return value != null use it as textContent (!) for the tooltip.\n     * Use the tooltip parameter if you want to write/update HTML.\n     */\n    function default_tooltip_display(series, tooltip){\n      var x_vals = [];\n      var text = \"\";\n      for(var i=0; i < series.length; ++i){\n        x_vals.push(series[i].value.x);\n        text += series[i].name + \": \" + this.tooltipFormatX(series[i].value.y) + \"\\n\";\n      }\n      text = this.tooltipFormatY(this.tooltipMergeX(x_vals)) + \"\\n\" + text;\n      return text;\n    }\n\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.Tooltips_flex = function(options) {\n      options = Chartist.extend({}, defaultOptions, options);\n      // This is a bit strange but allows the display func to use the formatter functions\n      options.tooltipDisplayFnc = options.tooltipDisplayFnc.bind(options);\n\n      return function tooltips_flex(chart) {\n        var chart_container = chart.container;\n        var tooltip = document.body.querySelector('.chartist-tooltip-flex');\n        var marker = null;\n        var width = 0, height = 0;\n        console.log(\"Chart:\", chart);\n\n        var series = [];\n        var created = false;\n        var old_sel_points = [];\n        var tooltipMergeFnc = options.tooltipMergeFnc;\n        if(typeof tooltipMergeFnc !== \"function\"){\n          tooltipMergeFnc = merge_functions[tooltipMergeFnc];\n        }\n\n        if(!tooltip){\n          tooltip = document.createElement('div');\n          tooltip.className = options.tooltipTooltipClass;\n          // Fallback CSS so its at least visible\n          tooltip.style.position = 'absolute';\n          tooltip.style.whiteSpace = 'pre';\n          document.body.append(tooltip);\n        }\n\n\n        function get_nearest_points(elements, point){\n          // TODO: we could remember the last found index and start from there the next time to increase search performance when moving the mouse over the graph.\n          var i = binarySearch(elements.raw_x, point, function(a,b){\n            if(a > b) return 1;\n            if(a < b) return -1;\n            return 0;\n          });\n          var data = elements.data.data;\n          var right = null;\n          i = Math.max(0, i);\n          var left = {svg: elements.svg[i], data: data[i]};\n          if(i+1 < data.length){\n            right = {svg: elements.svg[i+1], data: data[i+1]}\n          }\n          return [left, right];\n        }\n\n        var _tooltip_visible = false;\n        function _show_tooltip(){\n          tooltip.classList.add('tooltip-show');\n          marker.addClass('tooltip-show');\n          _tooltip_visible = true;\n        }\n        // TODO: onclick for mobiles ?\n        chart_container.addEventListener('mouseenter', function (event) {\n          _show_tooltip();\n        });\n        chart_container.addEventListener('mouseleave', function (event) {\n          tooltip.classList.remove('tooltip-show');\n          marker.removeClass('tooltip-show');\n        });\n\n        var last_x = -1;\n        chart_container.addEventListener('mousemove', function (event) {\n          if(!created) return;\n          if(last_x === event.pageX){ //TODO: add min difference ?\n            return;\n          }\n          if(!_tooltip_visible) _show_tooltip();\n          last_x = event.pageX;\n          // getBoundingClientRect call required in case the graph position changes.\n          // I'd really like to get rid of this, but then we'd need to have the tooltip relative to the graph.\n          // TODO: as graph container child or as foreign svg object ?\n          var cont_box = chart.container.getBoundingClientRect();\n          var left_border = cont_box.left + window.pageXOffset;\n          var mouse_x = event.pageX - left_border;\n\n          // clean up old highlights\n          // TODO: Only do if required  \n          for(var i=0; i < old_sel_points.length; ++i){\n            old_sel_points[i].classList.remove(options.tooltipHighlightPointClass);\n          }\n          old_sel_points = [];\n\n          var values = [];\n          var vals_y = [];\n          for(var i=0; i < series.length; ++i){\n            var points = get_nearest_points(series[i], mouse_x);\n            points = tooltipMergeFnc(points[0], points[1], mouse_x)\n            values.push({value: points[1], name: series[i].data.name});\n            var pToHighlight = points[0];\n            for(var j=0; j < pToHighlight.length; ++j){\n              var node = pToHighlight[j].getNode();\n              vals_y.push(node.getAttribute('y1'));            \n              node.classList.add(options.tooltipHighlightPointClass);\n              old_sel_points.push(node);\n            }\n          }\n\n          // TODO: Use left instead ?\n          marker._node.setAttribute('transform', 'translate('+mouse_x+' 0)');\n          var ret = options.tooltipDisplayFnc(values, tooltip);\n          if(ret){\n            tooltip.textContent = ret;          \n          }\n          height = tooltip.offsetHeight;\n          width = tooltip.offsetWidth;\n          var offsetX = - width / 2 + options.tooltipOffset.x\n\n          var y = event.pageY;\n          if(options.tooltipFollowMaxLine){\n            y = Math.min.apply(Math, vals_y) + cont_box.top + window.pageYOffset - options.tooltipTooltipYDist;\n          }\n          var offsetY = - height + options.tooltipOffset.y;\n          tooltip.style.top = y + offsetY + 'px';\n          tooltip.style.left = event.pageX + offsetX + 'px';        \n        });\n\n\n\n        if (chart instanceof Chartist.Line) {\n          chart.on('created', function(data) {\n            console.log(data);\n            var grid = chart.svg.querySelector('.ct-grids');\n            var grid_box = grid.getNode().getBoundingClientRect();\n            var cont_box = chart.container.getBoundingClientRect();\n            var top_padding = grid_box.top - cont_box.top;\n            marker = chart.svg.elem('line', {x1: 0, y1: top_padding, x2: 0, y2: grid_box.height + top_padding, style: options.tooltipMarkerClass}, options.tooltipMarkerClass );\n\n            series = [];\n            var series_data = chart.data.series;\n            for(var i=0; i < series_data.length; ++i){\n              var series_name = series_data[i].className;\n              // We are (ab)using the points here. Alternatively we could use the lines values.\n              // Series not always have the classname attribute so fall back to using the name.\n              if(!series_name){\n                series_name = '[*|series-name=\"'+series_data[i].name+'\"]';\n              } else{\n                series_name = \".\" + series_name;\n              }\n              var elem = chart.svg.querySelectorAll(series_name + ' .ct-point').svgElements;\n              var raw_x = [];\n              // Create raw x value array to increase search performance\n              for(var j=0; j < elem.length; ++j){\n                raw_x.push(elem[j].attr('x1'));\n              }\n              var d = {data: series_data[i], raw_x: raw_x, svg: elem};\n              series.push(d);\n            }\n            created = true;\n          });\n        }\n      };\n    };\n    Chartist.plugins.Tooltips_flex.mergeFunctions = merge_functions;\n    Chartist.plugins.Tooltips_flex.defaultOptions = defaultOptions;\n  }(window, document, Chartist));\n\n  return Chartist.plugins.Tooltips_flex;\n\n}));\n"]}